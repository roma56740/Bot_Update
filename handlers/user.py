from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import ADMIN_ID
import db
from aiogram.dispatcher import FSMContext


from aiogram.dispatcher.filters.state import State, StatesGroup

class HelpRequestState(StatesGroup):
    waiting_for_target = State()
    waiting_for_reason = State()

def register_user_handlers(dp: Dispatcher):

    @dp.message_handler(lambda m: m.text in ["—Å–∫–ª–∞–¥", "–º–µ–Ω–µ–¥–∂–µ—Ä", "–±—É—Ö–≥–∞–ª—Ç–µ—Ä"])
    async def register_role(message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username or "–Ω–µ—Ç username"
        full_name = message.from_user.full_name
        role = message.text

        db.register_user(user_id, full_name, username, role)
        await message.answer(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {role}.", reply_markup=user_keyboard(role))


    @dp.message_handler(lambda m: m.text == "–ú–æ–π —Å—Ç–∞—Ç—É—Å")
    async def show_my_status(message: types.Message):
        user = db.get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start.")
            return

        text = (
            f"üë§ –ò–º—è: {user['name']}\n"
            f"üßë‚Äçüíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user['role']}\n"
            f"‚ù§Ô∏è –°–µ—Ä–¥–µ—Ü: {user['hearts']}\n"
            f"üí∏ –®—Ç—Ä–∞—Ñ: {user['fine']} BYN"
        )
        await message.answer(text)

    @dp.message_handler(lambda m: m.text == "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    async def show_my_stats(message: types.Message):
        user = db.get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        if user['role'] != '–º–µ–Ω–µ–¥–∂–µ—Ä':
            await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.")
            return

        stats = db.get_user_stats(user['id'])
        if not stats:
            await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        conversion = 0
        if stats['day_plan'] > 0:
            conversion = (stats['day_sales'] / stats['day_plan']) * 100

        text = (
            f"üë§ {user['name']}\n"
            f"üìÖ –ü–ª–∞–Ω: {stats['day_plan']} / {stats['month_plan']} BYN\n"
            f"üí∞ –ü—Ä–æ–¥–∞–∂–∏: {stats['day_sales']} BYN\n"
            f"üì¶ –ó–∞–∫–∞–∑—ã: {stats['orders_count']} —à—Ç\n"
            f"üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion:.1f}%"
        )
        await message.answer(text)

    @dp.message_handler(lambda m: m.text == "–ü–æ–º–æ–≥ –∫–æ–ª–ª–µ–≥–µ")
    async def start_help_request(message: types.Message):
        await message.answer("–ö–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–¥—Ü–µ? –ù–∞–ø–∏—à–∏—Ç–µ `—Å–µ–±–µ` –∏–ª–∏ @username:")
        await HelpRequestState.waiting_for_target.set()
    
    @dp.message_handler(state=HelpRequestState.waiting_for_target)
    async def help_request_target(message: types.Message, state: FSMContext):
        raw = message.text.strip()
        if raw.lower() == "—Å–µ–±–µ":
            await state.update_data(target_id=message.from_user.id)
        else:
            username = raw.lstrip('@')
            user = db.get_user_by_username(username)
            if not user:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            await state.update_data(target_id=user['telegram_id'])

        await state.update_data(from_user_id=message.from_user.id)
        await message.answer("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—ã –ø–æ–º–æ–≥–ª–∏:")
        await HelpRequestState.waiting_for_reason.set()


    @dp.message_handler(state=HelpRequestState.waiting_for_reason)
    async def help_request_reason(message: types.Message, state: FSMContext):
        reason = message.text.strip()
        data = await state.get_data()

        db.create_help_request(data['from_user_id'], data['target_id'], reason)

        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.finish()

        # –£–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∞
        from_user = db.get_user_by_telegram_id(data['from_user_id'])
        target_user = db.get_user_by_telegram_id(data['target_id'])

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{data['from_user_id']}_{data['target_id']}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{data['from_user_id']}")
        )

        await message.bot.send_message(
            int(ADMIN_ID),
            f"üÜò –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞:\n"
            f"–û—Ç: {from_user['name']} (@{from_user['username']})\n"
            f"–ö–æ–º—É: {target_user['name']} (@{target_user['username']})\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {reason}",
            reply_markup=keyboard
        )



def user_keyboard(role):
    buttons = ["–ú–æ–π —Å—Ç–∞—Ç—É—Å", "–ü–æ–º–æ–≥ –∫–æ–ª–ª–µ–≥–µ"]
    if role == "–º–µ–Ω–µ–¥–∂–µ—Ä":
        buttons.append("–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    return ReplyKeyboardMarkup(resize_keyboard=True).add(*[KeyboardButton(text=b) for b in buttons])
