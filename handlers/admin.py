from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import ADMIN_ID
import db

from datetime import datetime
import pytz
import asyncio


async def notify_user_later(bot, user_id, text):
    tg_id = db.get_telegram_id_by_user_id(user_id)
    if not tg_id:
        return

    now = datetime.now(pytz.timezone("Europe/Moscow"))
    if 21 <= now.hour or now.hour < 8:
        await bot.send_message(tg_id, text)
    else:
        target = 21
        delay_sec = ((target - now.hour) % 24) * 3600
        await asyncio.sleep(delay_sec)
        await bot.send_message(tg_id, text)


class DeleteUserState(StatesGroup):
    waiting_for_username = State()

class PlanSalesState(StatesGroup):
    waiting_for_plan = State()

class HeartGiveState(StatesGroup):
    waiting_for_username = State()
    waiting_for_reason = State()
    waiting_for_reduce_fine = State()

class AddOrderState(StatesGroup):
    waiting_for_username = State()
    waiting_for_price = State()
    waiting_for_description = State()

class HeartRemoveState(StatesGroup):
    waiting_for_username = State()
    waiting_for_fine_reason = State()
    waiting_for_fine_amount = State()


def register_admin_handlers(dp: Dispatcher):

    @dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", state="*")
    async def show_all_users(message: types.Message, state: FSMContext):
        await state.finish()
        users = db.get_all_users()
        if not users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        text = "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for user in users:
            text += f"{user['name']} - @{user['username']} ({user['role']})\n"
        await message.answer(text)

    @dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", state="*")
    async def delete_user_start(message: types.Message, state: FSMContext):
        await state.finish()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
        await DeleteUserState.waiting_for_username.set()

    @dp.message_handler(state=DeleteUserState.waiting_for_username)
    async def delete_user_by_username(message: types.Message, state: FSMContext):
        username = message.text.strip().lstrip('@')
        success = db.delete_user_by_username(username)
        if success:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª—ë–Ω.")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.finish()

    @dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂", state="*")
    async def start_plan_sales(message: types.Message, state: FSMContext):
        await state.finish()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å –∏ –Ω–∞ –º–µ—Å—è—Ü (–≤ BYN)")
        await PlanSalesState.waiting_for_plan.set()

    @dp.message_handler(state=PlanSalesState.waiting_for_plan)
    async def set_plan_sales(message: types.Message, state: FSMContext):
        try:
            day, month = map(float, message.text.strip().split())
        except:
            await message.answer("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: 200 5000")
            return
        db.set_plan_for_all(day, month)
        await message.answer(f"‚úÖ –ü–ª–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {day} BYN –≤ –¥–µ–Ω—å, {month} BYN –≤ –º–µ—Å—è—Ü –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
        await state.finish()

    @dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "–í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã", state="*")
    async def show_all_managers(message: types.Message, state: FSMContext):
        await state.finish()
        managers = db.get_all_managers_with_stats()
        if not managers:
            await message.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        text = "üìä –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:\n\n"
        for m in managers:
            conversion = (m['day_sales'] / m['day_plan'] * 100) if m['day_plan'] else 0
            text += (
                f"üë§ {m['name']} - @{m['username']}\n"
                f"üìÖ –ü–ª–∞–Ω: {m['day_plan']} / {m['month_plan']} BYN\n"
                f"üí∞ –ü—Ä–æ–¥–∞–∂–∏: {m['day_sales']} BYN\n"
                f"üì¶ –ó–∞–∫–∞–∑—ã: {m['orders_count']} —à—Ç\n"
                f"üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion:.1f}%\n\n"
            )
        await message.answer(text)

    @dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", state="*")
    async def start_add_order(message: types.Message, state: FSMContext):
        await state.finish()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ @username –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑:")
        await AddOrderState.waiting_for_username.set()

    @dp.message_handler(state=AddOrderState.waiting_for_username)
    async def get_order_price(message: types.Message, state: FSMContext):
        username = message.text.strip().lstrip('@')
        user = db.get_user_by_username(username)
        if not user or user['role'] != '–º–µ–Ω–µ–¥–∂–µ—Ä':
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
            return
        await state.update_data(user_id=user['id'], username=username)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ (–≤ BYN):")
        await AddOrderState.waiting_for_price.set()

    @dp.message_handler(state=AddOrderState.waiting_for_price)
    async def get_order_description(message: types.Message, state: FSMContext):
        try:
            price = float(message.text.strip())
        except:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ —á–∏—Å–ª–æ–º.")
            return
        await state.update_data(price=price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
        await AddOrderState.waiting_for_description.set()

    @dp.message_handler(state=AddOrderState.waiting_for_description)
    async def finish_add_order(message: types.Message, state: FSMContext):
        data = await state.get_data()
        db.add_order(data['user_id'], data['price'], message.text.strip())
        db.update_sales_stats(data['user_id'], data['price'])
        await message.answer("‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω!")
        tg_id = db.get_telegram_id_by_user_id(data['user_id'])
        if tg_id:
            await message.bot.send_message(
                tg_id,
                f"üì¶ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑:\nüí∞ –°—É–º–º–∞: {data['price']} BYN\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {message.text.strip()}"
            )
        await state.finish()

    @dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "–¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–¥—Ü–µ", state="*")
    async def start_add_heart(message: types.Message, state: FSMContext):
        await state.finish()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–¥—Ü–µ:")
        await HeartGiveState.waiting_for_username.set()

    @dp.message_handler(state=HeartGiveState.waiting_for_username)
    async def check_user_for_heart(message: types.Message, state: FSMContext):
        username = message.text.strip().lstrip('@')
        user = db.get_user_by_username(username)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await state.update_data(user_data=user)
        if user['fine'] > 0:
            await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —à—Ç—Ä–∞—Ñ: {user['fine']} BYN. –°–∫–æ–ª—å–∫–æ —Å–ø–∏—Å–∞—Ç—å?")
            await HeartGiveState.waiting_for_reduce_fine.set()
        elif user['hearts'] >= 3:
            await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –º–∞–∫—Å–∏–º—É–º 3 —Å–µ—Ä–¥—Ü–∞. –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É, –∑–∞ —á—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–µ—Ä–¥—Ü–µ:")
            await HeartGiveState.waiting_for_reason.set()

    @dp.message_handler(state=HeartGiveState.waiting_for_reduce_fine)
    async def reduce_fine(message: types.Message, state: FSMContext):
        try:
            amount = int(message.text.strip())
        except:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–ø–∏—Å–∞–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞ —á–∏—Å–ª–æ–º.")
            return
        data = await state.get_data()
        user = data['user_data']
        new_fine = max(0, user['fine'] - amount)
        db.set_user_fine(user['id'], new_fine)
        if new_fine == 0 and user['hearts'] < 3:
            await message.answer("–®—Ç—Ä–∞—Ñ –∑–∞–∫—Ä—ã—Ç. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É, –∑–∞ —á—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–µ—Ä–¥—Ü–µ:")
            await HeartGiveState.waiting_for_reason.set()
        else:
            await message.answer("–®—Ç—Ä–∞—Ñ –æ–±–Ω–æ–≤–ª—ë–Ω.")
            await state.finish()

    @dp.message_handler(state=HeartGiveState.waiting_for_reason)
    async def add_heart(message: types.Message, state: FSMContext):
        reason = message.text.strip()
        data = await state.get_data()
        user = data['user_data']
        db.add_heart(user['id'])
        await message.answer(f"–°–µ—Ä–¥—Ü–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user['username']} ‚ù§Ô∏è")
        now = datetime.now(pytz.timezone("Europe/Moscow"))
        if 21 <= now.hour or now.hour < 8:
            tg_id = db.get_telegram_id_by_user_id(user['id'])
            if tg_id:
                await message.bot.send_message(
                    tg_id,
                    f"üíñ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–µ—Ä–¥—Ü–µ!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                )
        else:
            await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ—á—å—é (21:00‚Äì08:00 –ø–æ –ú–°–ö).")
        await state.finish()

    @dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "—Å–Ω—è—Ç—å —Å–µ—Ä–¥—Ü–µ", state="*")
    async def start_remove_heart(message: types.Message, state: FSMContext):
        await state.finish()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å —Å–µ—Ä–¥—Ü–µ:")
        await HeartRemoveState.waiting_for_username.set()

    @dp.message_handler(state=HeartRemoveState.waiting_for_username)
    async def remove_heart_or_fine(message: types.Message, state: FSMContext):
        username = message.text.strip().lstrip('@')
        user = db.get_user_by_username(username)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await state.update_data(user_data=user)
        if user['hearts'] > 0:
            db.remove_heart(user['id'])
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–Ω—è—Ç–∏—è —Å–µ—Ä–¥—Ü–∞:")
            await HeartRemoveState.waiting_for_fine_reason.set()
        else:
            await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–µ—Ä–¥–µ—Ü. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞ –≤ BYN:")
            await HeartRemoveState.waiting_for_fine_amount.set()

    @dp.message_handler(state=HeartRemoveState.waiting_for_fine_amount)
    async def fine_amount(message: types.Message, state: FSMContext):
        try:
            fine = int(message.text.strip())
        except:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞ —á–∏—Å–ª–æ–º.")
            return
        await state.update_data(fine=fine)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —à—Ç—Ä–∞—Ñ–∞:")
        await HeartRemoveState.waiting_for_fine_reason.set()

    @dp.message_handler(state=HeartRemoveState.waiting_for_fine_reason)
    async def handle_fine_or_remove_reason(message: types.Message, state: FSMContext):
        reason = message.text.strip()
        data = await state.get_data()
        user = data['user_data']
        if 'fine' in data:
            fine = data['fine']
            db.add_fine(user['id'], fine)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user['username']} –¥–æ–±–∞–≤–ª–µ–Ω —à—Ç—Ä–∞—Ñ {fine} BYN.")
            await notify_user_later(
                message.bot,
                user['id'],
                f"üö´ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω —à—Ç—Ä–∞—Ñ: {fine} BYN\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        else:
            await message.answer(f"‚ù§Ô∏è –°–µ—Ä–¥—Ü–µ —Å–Ω—è—Ç–æ —É @{user['username']}.\n–ü—Ä–∏—á–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            await notify_user_later(
                message.bot,
                user['id'],
                f"üíî –£ –≤–∞—Å —Å–Ω—è—Ç–æ —Å–µ—Ä–¥—Ü–µ.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        await state.finish()

    @dp.callback_query_handler(lambda c: c.data.startswith("approve_"))
    async def approve_heart_request(call: types.CallbackQuery):
        _, from_id, to_id = call.data.split("_")
        from_id = int(from_id)
        to_id = int(to_id)
        db.add_heart_by_telegram_id(to_id)
        db.delete_help_request_by_user(from_id)
        await call.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        await notify_user_later(call.bot, to_id, "üíñ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–µ—Ä–¥—Ü–µ –∑–∞ –ø–æ–º–æ—â—å –æ—Ç –∫–æ–ª–ª–µ–≥–∏!")

    @dp.callback_query_handler(lambda c: c.data.startswith("reject_"))
    async def reject_heart_request(call: types.CallbackQuery):
        _, from_id = call.data.split("_")
        from_id = int(from_id)
        db.delete_help_request_by_user(from_id)
        await call.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await call.bot.send_message(from_id, "üö´ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
