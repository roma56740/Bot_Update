from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import pytz
import db
from config import ADMIN_ID

scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

def setup_daily_report(bot):
    @scheduler.scheduled_job("cron", hour=8, minute=0)
    async def send_daily_report():
        try:
            # üìã –û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            users = db.get_all_users_full()
            msg1 = "üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
            for u in users:
                msg1 += (
                    f"{u['name']} - @{u['username']} ({u['role']})\n"
                    f"‚ù§Ô∏è –°–µ—Ä–¥–µ—Ü: {u['hearts']}, üí∏ –®—Ç—Ä–∞—Ñ: {u['fine']} BYN\n\n"
                )

            # üìä –û—Ç—á—ë—Ç –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
            managers = db.get_all_managers_with_stats()
            msg2 = "üìä –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:\n\n"
            for m in managers:
                conversion = (m['day_sales'] / m['day_plan'] * 100) if m['day_plan'] else 0
                msg2 += (
                    f"{m['name']} - @{m['username']}\n"
                    f"üìÖ –ü–ª–∞–Ω: {m['day_plan']} / {m['month_plan']} BYN\n"
                    f"üí∞ –ü—Ä–æ–¥–∞–∂–∏: {m['day_sales']} BYN\n"
                    f"üì¶ –ó–∞–∫–∞–∑—ã: {m['orders_count']} —à—Ç\n"
                    f"üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion:.1f}%\n\n"
                )

            await bot.send_message(ADMIN_ID, msg1 + msg2)

        except Exception as e:
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

    # –°—Ç–∞—Ä—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —É–ø–∞–ª event loop)
    import asyncio
    async def start_scheduler():
        scheduler.start()

    asyncio.get_event_loop().create_task(start_scheduler())
